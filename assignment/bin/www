#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('assignment:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

/**
 * Get port number from process.argv or process.env or default.
 * process.env属性返回一个包含用户环境信息的对象.
 */
function getPort() {
  if (!!process.argv[2]) { // 如果输入了端口号
    if (isNaN(process.argv[2])) { // 如果端口号不为数字，进行错误提示
      throw 'PORT ERROR: Please enter the correct port number.'
    } else { // 如果端口号输入正确，将使用该端口号
      return process.argv[2]
    }
  } else { // 如果未输入端口号，则获取用户环境信息中的端口号或者使用默认端口号
    return normalizePort(process.env.PORT || '8080');
  }
}
var port = getPort();

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
